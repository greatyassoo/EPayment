@startuml admin_acceptRefund

actor admin
boundary external_interface as external_interface
control EPaymentAPI as EPaymentAPI
database AccountsFetcher as AccountsFetcher
entity Account as Account
entity transaction as transaction
admin->external_interface:showRefundRequests
external_interface->EPaymentAPI:{GET} getRefundRequests(adminEmail,password)
EPaymentAPI->AccountsFetcher:getAllAccounts()
AccountsFetcher-->EPaymentAPI:returns accounts

loop i<accounts.size()
    loop j<accounts.get(i).getRefundRequests.size()
    EPaymentAPI->Account:accounts.get(i).getTransaction(accounts.get(i).getRefundRequests.get(j))
    end    
end

EPaymentAPI-->external_interface:returns refundRequests
external_interface-->admin:returns refundRequests
admin->external_interface:AcceptRefundRequest(0)
external_interface->EPaymentAPI:{POST} processRefundRequest(body)
EPaymentAPI->AccountsFetcher:getAccount(userEmail)
AccountsFetcher-->EPaymentAPI:returns account
EPaymentAPI->Account:getTransaction(transacionID)
Account-->EPaymentAPI:returns transaction
EPaymentAPI->Account:addTransaction(new transaction with type refund and \n-ve the ammount of the accepted transaction)
EPaymentAPI->transaction:getAmount()
transaction-->EPaymentAPI:returns amount
EPaymentAPI->Account:getWalletBalance()
Account-->EPaymentAPI:returns walletBalance
EPaymentAPI->Account:setWalletBalance(amount+walletBalance)
EPaymentAPI->Account:removeRefundRequest(transactionID)
EPaymentAPI-->external_interface:returns 0
@enduml